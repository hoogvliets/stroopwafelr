[["index.html", "stroopwafelr 1 stroopwafelr", " stroopwafelr 1 stroopwafelr Omdat stroopwafels lekker zijn "],["model.html", "2 Model 2.1 Supervised learning 2.2 Unsupervised learning", " 2 Model 2.1 Supervised learning #bla 2.1.1 #bla 2.2 Unsupervised learning Test 123 2.2.1 K-means library(tidyverse) library(cluster) kmeans_data &lt;- iris kmeans_columns &lt;- c(&quot;Sepal.Length&quot;, &quot;Sepal.Width&quot;, &quot;Petal.Length&quot;, &quot;Petal.Width&quot;) kmeans_selection &lt;- kmeans_data[kmeans_columns] %&gt;% scale() %&gt;% data.frame() silhouette_tries &lt;- 10 silhouette_avg_f &lt;- function(k_value) { model &lt;- pam(x = kmeans_selection, k = k_value) model$silinfo$avg.width } silhouette_widths &lt;- map_dbl(2:silhouette_tries, silhouette_avg_f) silhouette_results &lt;- data.frame( k = 2:silhouette_tries, sil_width = silhouette_widths ) silhouette_results ## k sil_width ## 1 2 0.5817500 ## 2 3 0.4566432 ## 3 4 0.4091122 ## 4 5 0.3574385 ## 5 6 0.3399978 ## 6 7 0.3263242 ## 7 8 0.3321157 ## 8 9 0.3310056 ## 9 10 0.3508136 max(silhouette_results$sil_width) ## [1] 0.58175 kmeans_centroids &lt;- silhouette_results %&gt;% arrange(desc(sil_width)) %&gt;% slice(1) %&gt;% pull(k) rm(silhouette_avg_f, silhouette_tries, silhouette_widths, silhouette_results) # scree parameters scree_wss &lt;- 0 # initialize total within sum of squares error scree_k &lt;- 5 # number of clusters to cycle scree_ns &lt;- 10 # number of random starts to cycle # For 1 to 15 cluster centers for (i in 1:scree_k) { km_out &lt;- kmeans(kmeans_selection, centers = i, nstart = scree_ns) # Save total within sum of squares to wss variable scree_wss[i] &lt;- km_out$tot.withinss } # Quickplot of total within sum of squares vs. number of clusters plot(1:scree_k, scree_wss, type = &quot;b&quot;, xlab = &quot;Number of Clusters&quot;, ylab = &quot;Within groups sum of squares&quot;) # clean up environment rm(i, scree_k, scree_ns, scree_wss, km_out) # set random seed for reproducibility set.seed(1337) # run k-means with 3 centers and 20 starts kmeans_output &lt;- kmeans(kmeans_selection, kmeans_centroids, nstart = 20) kmeans_results &lt;- kmeans_data %&gt;% mutate(Cluster = kmeans_output$cluster) %&gt;% # Merge clusters to data mutate(Cluster = as.character(Cluster)) %&gt;% # change to string for plotting asthetics pivot_longer(cols = c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width), names_to = &quot;Feature&quot;, values_to = &quot;Value&quot;) %&gt;% select(Feature, Value, Cluster) kmeans_clustermeans &lt;- kmeans_results %&gt;% group_by(Feature, Cluster) %&gt;% summarise( Value = mean(Value) ) ## `summarise()` has grouped output by &#39;Feature&#39;. You can override using the `.groups` argument. 2.2.1.1 Plot cluster heatmap # remove row names cluster and melt data kmeans_clustermeans %&gt;% # plot heatmap ggplot(aes(Cluster, Feature)) + geom_tile(aes(fill = Value), colour = &quot;white&quot;) + scale_fill_gradient(low = &quot;white&quot;, high = &quot;#01B8AA&quot;) + theme(legend.position = &quot;none&quot;, axis.line = element_blank(), axis.ticks = element_blank(), axis.title.x = element_blank(), axis.title.y=element_blank()) #### Cleanup environment rm(kmeans_clustermeans, kmeans_data, kmeans_output, kmeans_results, kmeans_selection, kmeans_centroids, kmeans_columns) "]]
